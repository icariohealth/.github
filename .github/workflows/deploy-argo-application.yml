---
name: Deploy Argo Application

on:
  workflow_call:
    inputs:
      previous_environment:
        type: string
        description: previous environment to deploy
        default: tst
        required: false
      environment:
        type: string
        description: environment to deploy
        required: true
      service_name:
        type: string
        description: service name
        required: true
      semantic_new_release_version:
        type: string
        description: the semantic release version
        required: false
      notification_emails:
        type: string
        description: 'Comma-separated list of email addresses'
        required: false
    secrets:
      ARGOCD_AUTH_TOKEN:
        required: true
      DD_API_KEY:
        required: true
      DD_MONITOR_APP_KEY:
        required: true
      PAT_TOKEN:
        required: false
      TEAMS_WEBHOOK_URL:
        required: false
      AIVELLA_TEAMS_WEBHOOK_URL:  # New secret for Aivella Engineering channel
        required: false
      SENDGRID_DEPLOYMENT_NOTI_API_KEY:
        required: false
    outputs:
      semantic_new_release_version:
        description: the semantic release version
        value: ${{ jobs.deploy.outputs.semantic_new_release_version }}

permissions:
  id-token: write
  contents: write
  pull-requests: write
  repository-projects: write
jobs:
  deploy:
    name: Deploy Argo Application
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      semantic_new_release_version: ${{ steps.determine_revision.outputs.target_revision }}
    steps:
      - name: Install dependencies
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Check out sources code
        uses: actions/checkout@v4

      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Dry-run Release Git Client Setup
        if: ${{ inputs.environment == 'tst' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # configure git client
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull origin ${{ steps.extract_branch.outputs.branch }}

      - name: 'Dry-run Release'
        if: ${{ inputs.environment == 'tst' }}
        uses: 'cycjimmy/semantic-release-action@v4'
        id: dry_run_semantic
        with:
          branch: ${{ steps.extract_branch.outputs.branch }}
          dry_run: true
          extra_plugins: |
            "@semantic-release/github"
            "@semantic-release/changelog"
            "@semantic-release/git"
            "@semantic-release/exec"
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN  }}'

      - name: Dry-run Release Cleanup
        if: ${{ inputs.environment == 'tst' }}
        run: |
          rm -rf node_modules
          rm -f package-lock.json
          npm cache clean --force

      - name: Create PR promote image tag
        id: createPrId
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KUSTOMIZATION_PATH: manifests/overlays/${{ inputs.environment }}/kustomization.yaml
          SERVICE_NAME: ${{ inputs.service_name }}
          SEMANTIC_NEW_RELEASE_VERSION: ${{ steps.dry_run_semantic.outputs.new_release_git_tag }}
        run: |
          # configure git client
          git config user.name github-actions
          git config user.email github-actions@github.com

          # get the image tag
          calculatedSha=$(git rev-parse --short=8 ${{ github.sha }})
          export NEW_BRANCH=${{ inputs.environment }}/$calculatedSha
          echo "NEW_BRANCH=$NEW_BRANCH" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$calculatedSha" >> $GITHUB_OUTPUT
          export IMAGE_TAG=$SERVICE_NAME-$calculatedSha
          
          # create a new branch
          git pull origin ${{ steps.extract_branch.outputs.branch }}
          git checkout -b $NEW_BRANCH
          
          # merge specific file from ${{ steps.extract_branch.outputs.branch }}
          git checkout ${{ steps.extract_branch.outputs.branch }} $KUSTOMIZATION_PATH
          yq e -i '.images[0].newTag= env(IMAGE_TAG)' $KUSTOMIZATION_PATH
          git add $KUSTOMIZATION_PATH

          # Update the development-patch.yaml file with the IMAGE_TAG_VERSION
          yq e -i '(.[] | select(.op == "add" and .value.name == "IMAGE_TAG_VERSION").value.value) = env(IMAGE_TAG)' manifests/overlays/${{ inputs.environment }}/development-patch.yaml
          git add manifests/overlays/${{ inputs.environment }}/development-patch.yaml

          if [ "${{ inputs.environment }}" == 'tst' ] && [ -n "$SEMANTIC_NEW_RELEASE_VERSION" ]; then
            ENVIRONMENTS=("tst" "prgconf" "stg" "prd")
            for ENV in "${ENVIRONMENTS[@]}"; do
              yq e -i '.images[0].newTag= env(IMAGE_TAG)' manifests/overlays/${ENV}/kustomization.yaml
              git add manifests/overlays/${ENV}/kustomization.yaml

              # Update the development-patch.yaml file
              yq e -i '(.[] | select(.op == "add" and .value.name == "IMAGE_TAG_VERSION").value.value) = env(IMAGE_TAG)' manifests/overlays/${ENV}/development-patch.yaml
              yq e -i '(.[] | select(.path == "/spec/template/metadata/labels/tags.datadoghq.com~1version").value) = env(SEMANTIC_NEW_RELEASE_VERSION)' manifests/overlays/${ENV}/development-patch.yaml
              git add manifests/overlays/${ENV}/development-patch.yaml
            done
          fi
          
          numOfFilesChanged=$( git diff --name-only origin/${{ steps.extract_branch.outputs.branch }} | wc -l )
          echo "The number of files is different between the branches $NEW_BRANCH and ${{ steps.extract_branch.outputs.branch }}: $numOfFilesChanged"
          
          if [ $numOfFilesChanged -gt 0 ]; then
            # push the change to the new branch
            git commit -m "Update image tag of ${{ inputs.environment }} environment"
            git push -u origin $NEW_BRANCH
            
            #create pr
            gh pr create \
              -B ${{ steps.extract_branch.outputs.branch }} \
              -H $NEW_BRANCH\
              --title "Promote deploy ${{ inputs.environment }} environment" \
              --body "Automatically created by GitHub Actions" \

          fi

      - name: Merge PR
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          NEW_BRANCH: ${{ steps.createPrId.outputs.NEW_BRANCH }}
        run: |
          if [ -n "$PAT_TOKEN" ]; then
            unset GITHUB_TOKEN
            echo $PAT_TOKEN | gh auth login --with-token
          fi
          gh pr merge ${{ env.NEW_BRANCH }} --merge --admin --delete-branch

      - name: 'Release'
        if: ${{ inputs.environment == 'tst' }}
        uses: 'cycjimmy/semantic-release-action@v4'
        id: semantic
        with:
          branch: ${{ steps.extract_branch.outputs.branch }}
          extra_plugins: |
            "@semantic-release/github"
            "@semantic-release/changelog"
            "@semantic-release/git"
            "@semantic-release/exec"
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN  }}'

      - name: Determine target revision
        env:
         BRANCH: ${{ steps.extract_branch.outputs.branch }}
        id: determine_revision
        run: |
          if [[ "${{ steps.semantic.outputs.new_release_published }}" == 'true' ]]; then
            echo "target_revision=${{ steps.semantic.outputs.new_release_git_tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.semantic_new_release_version }}" != '' ]]; then
            echo "target_revision=${{ inputs.semantic_new_release_version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.environment }}" == 'dev' ]]; then
            echo "target_revision=$BRANCH" >> $GITHUB_OUTPUT
          else
            echo "target_revision=" >> $GITHUB_OUTPUT
          fi

      - name: Mute Monitors
        continue-on-error: true  
        uses: raviocom/datadog-downtime-action@v1
        with:
          downtime-minutes: 10
          scope: '["service:${{ inputs.service_name }}"]'
          message: "Muting monitors for ${{ inputs.service_name }} deployment"
          api-key: ${{ secrets.DD_API_KEY }}
          app-key: ${{ secrets.DD_MONITOR_APP_KEY }}

      - name: Deploy Application
        id: deploy-application
        env:
          APPLICATION_PATH: app-managers/overlays/${{ inputs.environment }}
          APPLICATION_FILE_NAME: application-${{ inputs.environment }}.yaml
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
          SERVER_ADDRESS: argo.dep.icariohealth.io
          TARGET_REVISION: ${{ steps.determine_revision.outputs.target_revision }}
        run: |
          if [ -n "$TARGET_REVISION" ]; then
            echo -e "\n- op: 'replace'\n  path: '/spec/source/targetRevision'\n  value: '$TARGET_REVISION'" >> $APPLICATION_PATH/application.yaml
            kustomize build $APPLICATION_PATH > $APPLICATION_FILE_NAME

            set +e
            MAX_RETRIES=5
            RETRY_DELAY=5
            ARGO_GENERIC_ERR_EXIT_CODE=20
            DEPLOY_COMMAND="argocd app create -f  $APPLICATION_FILE_NAME --http-retry-max $MAX_RETRIES --auth-token $ARGOCD_AUTH_TOKEN --server $SERVER_ADDRESS --upsert"
            
            deploy_with_retries() {
              local attempt=1
              local exit_code
              while [ $attempt -le $MAX_RETRIES ]; do
                $DEPLOY_COMMAND
                exit_code=$?
                if [ $exit_code -eq $ARGO_GENERIC_ERR_EXIT_CODE ]; then
                  echo "::warning::Attempt $attempt failed with exit code $ARGO_GENERIC_ERR_EXIT_CODE. Retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                  ((attempt++))
                else
                  break
                fi
              done
              return $exit_code
            }

            deploy_with_retries
            exit_code=$?
            echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

            set -e
            if [ $exit_code -eq 0 ]; then
              echo "Application deployed successfully!"
            elif [ $exit_code -eq $ARGO_GENERIC_ERR_EXIT_CODE ]; then
              echo "::error::Application deploy failed after $MAX_RETRIES retries."
              exit $exit_code
            else
              exit $exit_code
            fi
          else
            echo -e "::warning:: Deploy Announcement:"
            echo -e "::warning:: The release has been not deployed, it appears there are no commits following the conventional commit guidelines for this release."
            echo -e "::warning:: To ensure future releases are properly versioned and tagged, please refer to the https://mynovu.atlassian.net/wiki/x/BQDS5w#Style-Guide for detailed instructions on how to format your commits."
            echo -e "::warning:: We recommend following these conventions to maintain consistency and automation in versioning and release management."
            echo -e "::warning:: Thank you!"
            exit 1
          fi

      - name: Notify Teams Channel After Deployment
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL || '' }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            DEPLOY_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            COMMIT_MSG=$(git log --format=%B -n 1 $GITHUB_SHA | head -1)
            SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
            curl -X POST "$TEAMS_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d '{
              "type":"message",
                "attachments":[
                  {
                    "contentType": "application/vnd.microsoft.card.adaptive",
                    "contentUrl": null,
                    "content": {
                      "type": "AdaptiveCard",
                      "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                      "version": "1.5",
                      "body": [
                        {
                          "type": "TextBlock",
                          "text": "Deployment Approved and Applied",
                          "wrap": true,
                          "style": "heading"
                        },
                        {
                          "type": "FactSet",
                          "facts": [
                            {
                              "title": "Service:",
                              "value": "${{ inputs.service_name }}"
                            },
                            {
                              "title": "Environment:",
                              "value": "${{ inputs.environment }}"
                            },
                            {
                              "title": "Release tag version/Branch",
                              "value": "${{ steps.determine_revision.outputs.target_revision }}"
                            },
                            {
                              "title": "Commit:",
                              "value": "'"$SHORT_SHA"' - '"$COMMIT_MSG"'"
                            },
                            {
                              "title": "Approved By:",
                              "value": "${{ github.actor }}"
                            },
                            {
                              "title": "Deployment Time:",
                              "value": "'"$DEPLOY_TIME"'"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }' || true
          fi

      # NEW Aivella Engineering Teams notification
      - name: Notify Aivella Engineering Teams Channel After Deployment
        env:
          AIVELLA_TEAMS_WEBHOOK_URL: ${{ secrets.AIVELLA_TEAMS_WEBHOOK_URL || '' }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          if [ -n "$AIVELLA_TEAMS_WEBHOOK_URL" ]; then
            echo "Sending notification to Aivella Engineering Teams channel..."
            DEPLOY_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            COMMIT_MSG=$(git log --format=%B -n 1 $GITHUB_SHA | head -1)
            SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
            curl -X POST "$AIVELLA_TEAMS_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d '{
              "type":"message",
                "attachments":[
                  {
                    "contentType": "application/vnd.microsoft.card.adaptive",
                    "contentUrl": null,
                    "content": {
                      "type": "AdaptiveCard",
                      "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                      "version": "1.5",
                      "body": [
                        {
                          "type": "TextBlock",
                          "text": "Deployment Approved and Applied",
                          "wrap": true,
                          "style": "heading"
                        },
                        {
                          "type": "FactSet",
                          "facts": [
                            {
                              "title": "Service:",
                              "value": "${{ inputs.service_name }}"
                            },
                            {
                              "title": "Environment:",
                              "value": "${{ inputs.environment }}"
                            },
                            {
                              "title": "Release tag version/Branch",
                              "value": "${{ steps.determine_revision.outputs.target_revision }}"
                            },
                            {
                              "title": "Commit:",
                              "value": "'"$SHORT_SHA"' - '"$COMMIT_MSG"'"
                            },
                            {
                              "title": "Approved By:",
                              "value": "${{ github.actor }}"
                            },
                            {
                              "title": "Deployment Time:",
                              "value": "'"$DEPLOY_TIME"'"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }' || true
          else
            echo "Aivella Teams webhook URL not configured, skipping notification."
          fi
      - name: Notify Email Channel After Deployment
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_DEPLOYMENT_NOTI_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
        if: ${{ inputs.notification_emails }}
        run: |
          DEPLOY_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_MSG=$(git log --format=%B -n 1 $GITHUB_SHA | head -1)
          SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
      
          # Parse emails from input (comma-separated)
          IFS=',' read -ra EMAILS <<< "${{ inputs.notification_emails }}"
          TO_ARRAY=""
          for email in "${EMAILS[@]}"; do
            email=$(echo "$email" | xargs)
            if [ -n "$email" ]; then
              if [ -n "$TO_ARRAY" ]; then
                TO_ARRAY="$TO_ARRAY,"
              fi
              TO_ARRAY="$TO_ARRAY{\"email\":\"$email\"}"
            fi
          done
          HTML_CONTENT=$(cat <<EOF
            <!DOCTYPE html>
            <html>
              <head>
                <meta charset="utf-8">
              </head>
              <body style="font-family:Arial,sans-serif;line-height:1.6;color:#333;max-width:600px;margin:0 auto;padding:20px">
                <div style="background:#f8f9fa;padding:30px;border-radius:0 0 10px 10px;border:1px solid #e9ecef">
                  <h2 style="color:#28a745;margin-top:0;font-size:24px">Deployment Approved and Applied</h2>
                  <div style="background:#fff;padding:20px;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,.1)">
                    <table style="width:100%;border-collapse:collapse">
                      <tr>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;font-weight:700;color:#495057">Service:</td>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;color:#6c757d">${{ inputs.service_name }}</td>
                      </tr>
                      <tr>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;font-weight:700;color:#495057">Environment:</td>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;color:#6c757d">${{ inputs.environment }}</td>
                      </tr>
                      <tr>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;font-weight:700;color:#495057">Release tag version/Branch:</td>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;color:#6c757d">${{ steps.determine_revision.outputs.target_revision }}</td>
                      </tr>
                      <tr>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;font-weight:700;color:#495057">Commit:</td>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;color:#6c757d">$SHORT_SHA - $COMMIT_MSG</td>
                      </tr>
                      <tr>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;font-weight:700;color:#495057">Approved By:</td>
                        <td style="padding:12px 0;border-bottom:1px solid #eee;color:#6c757d">${{ github.actor }}</td>
                      </tr>
                      <tr>
                        <td style="padding:12px 0;font-weight:700;color:#495057">Deployment Time:</td>
                        <td style="padding:12px 0;color:#6c757d">$DEPLOY_TIME</td>
                      </tr>
                    </table>
                  </div>
                </div>
                <div style="margin-top:20px;padding:20px;background:#f8f9fa;border-radius:8px;text-align:center">
                  <p style="margin:0;color:#6c757d;font-size:14px">This is an automated notification from CI/CD pipeline.</p>
                </div>
              </body>
            </html>
          EOF
          )
          curl --request POST \
          --url https://api.sendgrid.com/v3/mail/send \
          --header "Authorization: Bearer $SENDGRID_API_KEY" \
          --header 'Content-Type: application/json' \
          --data "{
              \"personalizations\": [
              {
                  \"to\": [$TO_ARRAY],
                  \"subject\": \"Deployed - ${{ inputs.service_name }} - ${{ inputs.environment }} - ${{ steps.determine_revision.outputs.target_revision }}\"
              }
              ],
              \"from\": {
                  \"email\": \"no-reply@icariohealth.com\",
                  \"name\": \"Deploy Announcement\"
              },
              \"content\": [
              {
                  \"type\": \"text/html\",
                  \"value\": \"$(echo "$HTML_CONTENT" | sed 's/"/\\"/g' | tr -d '\n')\"
              }
              ]
          }"

      - name: Store deployment version
        if: steps.deploy-application.outputs.exit_code == '0'
        env:
          ORG: icariohealth
          DEPLOYED_REPO_NAME: deployed-service-versions
          COMMIT_HASH: ${{ steps.createPrId.outputs.COMMIT_HASH }}
          VERSION_FILE: ${{ inputs.environment }}/versions.yaml
        run: |
          SERVICE_DEPLOYMENT_REPO="https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ env.ORG }}/${{ env.DEPLOYED_REPO_NAME }}.git"
          git clone $SERVICE_DEPLOYMENT_REPO && cd ${{ env.DEPLOYED_REPO_NAME }}

          # configure git client
          git config user.name github-actions
          git config user.email github-actions@github.com
          git fetch origin main
          git rebase origin/main

          # update latest deployment version to environment ${{ inputs.environment }}
          yq e '.["${{ inputs.service_name }}"] = {"${{ steps.determine_revision.outputs.target_revision }}" : "${{ env.COMMIT_HASH }}"}' -i ${{ env.VERSION_FILE }}
          git add ${{ env.VERSION_FILE }}

          numOfFilesChanged=$( git diff --name-only origin/main | wc -l )
          echo "The number of files is different: $numOfFilesChanged"
          
          if [ $numOfFilesChanged -gt 0 ]; then
            git commit -m "Update latest deployment version ${{ env.COMMIT_HASH }} for service ${{ inputs.service_name }} on ${{ inputs.environment }} environment"
            git push -u origin main
          fi

      - name: Check version
        continue-on-error: true
        if: ${{ contains('prgconf,stg,prd', inputs.environment) }}
        uses: icariohealth/check-env-outofsync-action/.github/actions/check-version@v1.0.0
        with:
          from_env: ${{ inputs.previous_environment }}
          to_env: ${{ inputs.environment }}
          service_name: ${{ inputs.service_name }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          TARGET_REVISION: ${{ steps.determine_revision.outputs.target_revision }}